{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"Z:\\\\Projects\\\\Tweet\\\\tweets-web\\\\src\\\\tweets\\\\components.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nexport function TweetsList(props) {\n  _s();\n\n  const [Tweets, setTweets] = useState([]);\n  useEffect(() => {\n    //do lookup\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweets(response);\n      } else {\n        alert(\"There was an error\");\n      }\n    };\n\n    loadTweets(myCallback);\n  }, []);\n  return Tweets.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Tweet, {\n      tweet: item,\n      className: \"my-5 py-5 border bg-white text-dark\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 14\n    }, this);\n  });\n}\n\n_s(TweetsList, \"lxQbg2QPM5uD0fDanFqgFtlT6cY=\");\n\n_c = TweetsList;\n\nfunction loadTweets(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = 'GET'; // \"POST\"\n\n  const url = \"http://localhost:8000/api/tweets/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    callback({\n      \"message\": \"The request was an error\"\n    }, 400);\n  };\n\n  xhr.send();\n}\n\nexport function ActionBtn(props) {\n  const {\n    tweet,\n    action\n  } = props;\n  const className = props.className ? props.className : 'btn btn-primary btn-sm';\n  return action.type === 'like' ? /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    children: [\"  \", tweet.likes, \"   Likes\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 37\n  }, this) : null;\n}\n_c2 = ActionBtn;\nexport function Tweet(props) {\n  const {\n    tweet\n  } = props;\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [tweet.id, \" - \", tweet.content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn btn-group\",\n      children: /*#__PURE__*/_jsxDEV(ActionBtn, {\n        tweet: tweet,\n        action: {\n          type: \"like\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n}\n_c3 = Tweet;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TweetsList\");\n$RefreshReg$(_c2, \"ActionBtn\");\n$RefreshReg$(_c3, \"Tweet\");","map":{"version":3,"sources":["Z:/Projects/Tweet/tweets-web/src/tweets/components.js"],"names":["React","useEffect","useState","TweetsList","props","Tweets","setTweets","myCallback","response","status","alert","loadTweets","map","item","index","callback","xhr","XMLHttpRequest","method","url","responseType","open","onload","onerror","e","send","ActionBtn","tweet","action","className","type","likes","Tweet","id","content"],"mappings":"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","sourcesContent":["\r\nimport React, { useEffect, useState} from 'react';\r\n\r\nexport function TweetsList(props){\r\n    const [Tweets, setTweets] = useState([])\r\n  \r\n    useEffect(() =>{\r\n    //do lookup\r\n    const myCallback = (response, status) => {\r\n      if (status===200){ \r\n        setTweets(response)\r\n      }\r\n      else{\r\n        alert(\"There was an error\")\r\n      }\r\n    }\r\n    loadTweets(myCallback)\r\n  \r\n    }, [])\r\n  \r\n    return Tweets.map((item, index)=>{\r\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\r\n    })\r\n  }\r\n\r\nfunction loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET' // \"POST\"\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function(e){\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  }\r\n\r\n  \r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    return action.type === 'like' ? <button className={className} >  {tweet.likes}   Likes</button> : null\r\n  }\r\n  \r\nexport function Tweet(props){\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return(\r\n  \r\n      <div className={className}>\r\n        <p>{tweet.id } - {tweet.content}</p>\r\n        <div className = 'btn btn-group'>\r\n          <ActionBtn tweet={tweet} action={{type:\"like\"}}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }"]},"metadata":{},"sourceType":"module"}